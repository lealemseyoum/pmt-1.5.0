#! c:\perl\bin\perl.exe -w
#
# The contents of this file are subject to the IBM Common Public
# License Version 0.5 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of
# the License at http://oss.software.ibm.com/developerworks/
# opensource/license-cpl.html
#
# The Original Code is the Picture Metadata Toolkit,
# released November 13, 2000.
#
# The Initial Developer of the Original Code is Eastman
# Kodak Company. Portions created by Kodak are
# Copyright (C) 2003 Eastman Kodak Company. 
#
# Creation Date: July 2003
#
# Original Author:
# Sam Fryer <samuel.fryer@kodak.com>
#
# Contributor(s):
#
#
#
# This program parses the default PMT TranslationTable.xml to create a
# "pre-parsed" default translation table include file for PMT.  This script  
# depends on the translation table adhering to the translation table schema.
# A translation table that deviates from this will most likely cause compile
# time errors.

##use strict;

# Subroutine to return the proper #ifdef string for the file type.
sub getIfDef
{
    local($filetype) = @_;
    local($ifdef) = "";

    # if somethings not defined here, the library won't compile!
    # This is by design so that we ensure that we have the correct ifdefs around everything!
    if ($filetype eq "\"EXIF\"")
    {
        $ifdef = "#if defined(HAVE_KIESEXIF) || defined(HAVE_OPENEXIF)"
    }
    elsif ($filetype eq "\"TIFF\"")
    {
        $ifdef = "#if defined(HAVE_EKTIFF) || defined(HAVE_OPENTIFF)"
    }
    elsif ($filetype eq "\"DIG35\"")
    {
        $ifdef = "#if defined(PMT_DIG35) "
    }
    elsif ($filetype eq "\"PNG\"")
    {
        $ifdef = "#if defined(PMT_PNG_ACCESSOR) "
    }
    elsif ($filetype eq "\"QT\"")
    {
        $ifdef = "#if defined(PMT_QT_ACCESSOR) "
    }
    elsif ($filetype eq "\"XMP\"")
    {
        $ifdef = "#if defined(PMT_XMP_ACCESSOR) "
    }
    return( $ifdef );
}

sub Main
{
    my $infile = "../DefaultDefinitions/TranslationTable.xml";
    my $outfile = "../src/PmtTranslator/PmtTranslationTbl.h";
    my $tmpfile = "TTTempFile";

    open( INFILE, $infile) || die("\nError: Cannot open $infile for reading!\n");

    open( OUTFILE, ">$outfile") || die("\nError: Cannot open $outfile for writing!\n");
    open( TMPFILE, "+>$tmpfile") || die("\nError: Cannot open $tmpfile for writing!\n");

    print OUTFILE "//--------------------------------------------//\n";
    print OUTFILE "// This file automatically generated by Perl. //\n";
    print OUTFILE "//               DO NOT EDIT!                 //\n";
    print OUTFILE "//--------------------------------------------//\n";
    print OUTFILE "//\n";
    print OUTFILE "// Input File: $infile \n";
    print OUTFILE "//\n";
    print OUTFILE "// The contents of this file are subject to the IBM Common Public\n";
    print OUTFILE "// License Version 0.5 (the \"License\"); you may not use this file\n";
    print OUTFILE "// except in compliance with the License. You may obtain a copy of\n";
    print OUTFILE "// the License at http://oss.software.ibm.com/developerworks/\n";
    print OUTFILE "// opensource/license-cpl.html\n";
    print OUTFILE "//\n";
    print OUTFILE "// The Original Code is the Picture Metadata Toolkit,\n";
    print OUTFILE "// released November 13, 2000.\n";
    print OUTFILE "//\n";
    print OUTFILE "// The Initial Developer of the Original Code is Eastman\n";
    print OUTFILE "// Kodak Company. Portions created by Kodak are\n";
    print OUTFILE "// Copyright (C) 2003 Eastman Kodak Company. \n";
    print OUTFILE "//\n";
    print OUTFILE "//\n";

    print OUTFILE "\n#ifndef PMT_TRANSLATION_TBL_H\n";
    print OUTFILE "#define PMT_TRANSLATION_TBL_H\n";

    print OUTFILE "\n\n";
 
# This structure has been moved for more access by other cpp files.
#    print OUTFILE "// This is the structure that define how the default \n";
#    print OUTFILE "// translation table is stored after being pre-processed\n";
#    print OUTFILE "// by the perl script.  Any change here needs to be \n";
#    print OUTFILE "// actually made in that script.\n";
#    print OUTFILE "struct CharPmtTT\n";
#    print OUTFILE "{\n";
#    print OUTFILE "    const char * key;       // The metadata key\n";
#    print OUTFILE "    const char * uri;       // The metadata key URI\n";
#    print OUTFILE "    const char ** elements; // The TT elements.\n";
#    print OUTFILE "\n";
#    print OUTFILE "    // A default constructor for the array below\n";
#    print OUTFILE "    CharPmtTT( const char * theKey = NULL,\n";
#    print OUTFILE "               const char * theURI = NULL,\n";
#    print OUTFILE "               const char ** theElements = NULL ) \n";
#    print OUTFILE "    : key(theKey),uri(theURI),elements(theElements)\n";
#    print OUTFILE "    {};\n";
#    print OUTFILE "} ;\n";
    print OUTFILE "\n\n";
    print TMPFILE "const CharPmtTT defaultTranslationTableArray[] = {\n";
    
    
    my ($key,$uri,$elementCountName,$elementName);
    my ($inEntry, $count, $maxElements, $elementCount, $elementInitialized );

    $inEntry = $count = $maxElements = $elementCount = $elementInitialized = 0;
    my $my_counter = 0;
    while (<INFILE>)
    {
        chop;
        s/^\s+//;    #No leading white space
        s/\s+$//;    #No trailing white space
        next unless length ; # only continue if there's anything else.
        s/\/>//;
        s/>/ /;
        s/</ /;


        my @tokens = split( " ", $_ );
        

        if ( @tokens[0] eq "ENTRY" )
        {
            if ( $inEntry == 1 )
            {
                if ( $elementInitialized > 0 )
                {
                    print OUTFILE "    NULL\n};\n\n" ;
                    print TMPFILE "    CharPmtTT($key,$uri,\n";
                    print TMPFILE "              $elementName),\n";
                    $elementInitialized = 0;
                }
                if ( $elementCount > $maxElements )
                {
                    $maxElements = $elementCount;
                }
                $elementCount = 0;
            }
            
            if ( ( @tokens[1] cmp "Key=" ) == 1)
            {
                $key = @tokens[1] ;
                $key =~ s/Key=//g ;
            }

            $uri = NULL ;
            if ( ( scalar(@tokens) > 2 ) )
	    {
            if ( ( @tokens[2] cmp "URI=" ) == 1)
            {
                $uri = @tokens[2] ;
                $uri =~ s/URI=//g ;
            }
            }
            
            $elementCountName = $key ;
            $elementCountName =~ s/"//g ;
            $elementCountName =~ s/\./_/g ;
            $elementCountName = "PMT_TT_".$elementCountName ;
            $elementName = $elementCountName . "_Elements_" . "$my_counter" ;
            $elementCountName = $elementCountName . "_Count" ;
            $my_counter++ ;
            $inEntry = 1;
        }
        elsif ( $inEntry == 1 )
        {
            if ( @tokens[0] eq "/ENTRY" )
            {
                if ( $elementInitialized > 0 )
                {
                    print OUTFILE "    NULL\n};\n\n" ;
                    print TMPFILE "    CharPmtTT($key,$uri,\n";
                    print TMPFILE "              $elementName),\n";
                    $elementInitialized = 0;
                }
                $inEntry = 0;
                if ( $elementCount > $maxElements )
                {
                    $maxElements = $elementCount;
                }
                $elementCount = 0;
            }
            elsif ( ( @tokens[0] cmp "<" ) == 1) 
            {
                my $index = 1 ;
                my $name = @tokens[0] ;
                my ( $tag,$type,$location,$translator ) ;
                $tag = $type = $location = $translator = "NULL" ;
                $name = '"' . $name . '"' ;
                
                while ( $index <= $#tokens)
                {
                    my @attribute = split("=",@tokens[$index]);
                    if ( @attribute[0] eq "Tag" )
                    {
                        $tag = @attribute[1] ;
                    }
                    elsif ( @attribute[0] eq "Type" )
                    {
                        $type = @attribute[1] ;
                    }
                    elsif ( @attribute[0] eq "Location" )
                    {
                        $location = @attribute[1] ;
                    }
                    elsif ( @attribute[0] eq "Translator" )
                    {
                        $translator = @attribute[1] ;
                    }

                     $index += 1;
                } 
                
                if ( $elementInitialized == 0 )
                {
                    print OUTFILE "const char * $elementName [] =\n{\n" ;
                    $elementInitialized = 1;
                }
                
		my $ifdef = getIfDef($name);
		print OUTFILE "$ifdef\n";
                print OUTFILE "    $name , $tag , $type , $location , $translator,\n#endif\n" ;
                $count += 1;
                $elementCount += 1;
            }

        }
        
    }

    seek( TMPFILE, 0, 0 );
    while (<TMPFILE>)
    {
        print OUTFILE $_ ;
    }


    print OUTFILE "    CharPmtTT()\n};\n";
    print OUTFILE "\n#endif\n\n";

    unlink $tmpfile ;

    return ($count);
}


my $rv = Main();
print "done, $rv segment(s)\n";


