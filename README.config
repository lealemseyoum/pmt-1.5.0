
The configuration files that can be changed:

	pmt/Makefile.am
	pmt/configure.in
	pmt/bootstrap
	
	pmt/src/Makefile.am


Configuration files that are not to be changed:
	pmt/config-scripts/config.guess	- used by autoconf
	pmt/config-scripts/config.sub		- used by autoconf
	pmt/config.cache	- generated by configure
	pmt/config.log		- generated by configure
	pmt/config.status	- generated by configure
	pmt/configure		- generated by autoconf from configure.in
	pmt/config-scripts/depcomp		- used by automake / Makefile
	pmt/config-scripts/install-sh		- used by automake / Makefile
	pmt/libtool		- automatically customized version of libtool
	pmt/config-scripts/ltconfig		- used by libtool
	pmt/config-scripts/ltmain.sh		- used by libtool
	pmt/config-scripts/missing		- used by automake / autoconf
	pmt/config-scripts/mkinstalldirs	- used by automake / Makefile
	pmt/Makefile.in		- generated by automake
	pmt/src/Makefile.in	- generated by automake

Once a configuration file is changed, run the following
commands from within the pmt root directory:

	-> ./bootstrap
	-> ./configure

this will update the configuration and Makefiles. NOTE: this
will not complete without error due to a bug in autoconf. You
must do the following:

	-> cd src/.deps
	-> mkdir Ek PmtAccessor PmtCode PmtInterpreter PmtTranslator PmtUtils
	-> cd ../..
	-> ./configure

NOTE: must use automake v1.4a or greater



NOTE for DEVELOPERS:

When one is actually developing code it is desirable to not have to
deal with shared libraries nor wait for the extra compiles to 
create shared libraries. To disable the creation of shared libraried, 
do the following:

	-> ./configure --disable-shared

Optimization is also on by default, although debug symbols are available,
the optimed code is difficult to follow in a debugger. To turn off
the optimization do the following:

	-> setenv CXXFLAGS="-g"
	-> ./configure --disable-shared

So, to summarize, executing the above two lines produces the best
build environment for development.



Work to be done:

1) Need a config macro that looks for the presence of the
   xerces-c XML parser and set the XERCESCROOT make macro
   to its location

2) Creation of different targets: debug, opt, release. If this
   makes sense or is possible??

3) Versioning is to be driven by configure.in through the
   AM_INIT_AUTOMAKE(pmt, 1.0) config macro. The second argument,
   1.0 in this case, is the version of the release. This is supplied
   as -DVERSION="1.0" on the compile line.

4) Versioning of shared libraries.


