
dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/PmtCore/PmtMetadata.h)
AM_CONFIG_HEADER(src/PmtCore/PmtConfig.h)

dnl ==========================================================================
dnl Check if they want to compile in debug mode
dnl ==========================================================================

AC_ARG_WITH(enable_debug, [  -enable-debug= [ yes | no ] Compile in debug mode [default=no]])
AC_MSG_CHECKING(to compile in debug mode )
build_debug='no'
CXXFLAGS="-O2 -fPIC"
CFLAGS="-O2 -fPIC"
if [ test "x$enable_debug" = "xyes" ] ; then
  build_debug='yes'
  AC_DEFINE(_DEBUG)
  CXXFLAGS="-g"
  CFLAGS="-g"
fi
AC_MSG_RESULT([$build_debug])
AM_CONDITIONAL(PMT_DEBUG, test x$enable_debug = xyes)

dnl ==========================================================================
dnl Check if they want to compile in profile/coverage information
dnl ==========================================================================

AC_ARG_WITH(enable_profile, [  -enable-profile= [ yes | no ] Compile in profile/coverage information [default=no]])
AC_MSG_CHECKING(to compile in profile/coverage information )
build_profile='no'
if [ test "x$enable_profile" = "xyes" ] ; then
  if [ test "$build_debug" = "yes" ] ; then
	build_profile='yes'
	CXXFLAGS="$CXXFLAGS -fprofile-arcs -ftest-coverage -pg"
	CFLAGS="$CFLAGS -fprofile-arcs -ftest-coverage -pg"
  else
	AC_MSG_ERROR([*** Profile/Coverage information requires --enable-debug ***])
  fi
fi
AC_MSG_RESULT([$build_profile])


AC_CONFIG_AUX_DIR(./config-scripts)

dnl Determine the host system and Makefile fragment
AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(pmt, 1.5.0,subdir-objects)

dnl Checks for programs.
AC_PROG_CXX
AC_PROG_CXXCPP

dnl Determine if we're a maintainer or not
dnl (adds a --enable-maintainer-mode option)
AM_MAINTAINER_MODE

dnl ==========================================================================
dnl  ac_compile_warnings.m4
dnl ==========================================================================
dnl @synopsis AC_COMPILE_WARNINGS
dnl
dnl Set the maximum warning verbosity according to compiler used.
dnl Currently supports g++ and gcc.
dnl This macro must be put after AC_PROG_CC and AC_PROG_CXX in
dnl configure.in
dnl
dnl @version $Id: configure.in,v 1.55 2010/02/02 17:10:31 smfryer Exp $
dnl @author Loic Dachary <loic@senga.org>
dnl
AC_DEFUN([AC_COMPILE_WARNINGS],
[AC_MSG_CHECKING(maximum warning verbosity option)
if test -n "$CXX"
then
  if test "$GXX" = "yes"
  then
    ac_compile_warnings_opt='-Wall'
  fi
  CXXFLAGS="$CXXFLAGS $ac_compile_warnings_opt"
  ac_compile_warnings_msg="$ac_compile_warnings_opt for C++"
fi

if test -n "$CC"
then
  if test "$GCC" = "yes"
  then
    ac_compile_warnings_opt='-Wall'
  fi
  CFLAGS="$CFLAGS $ac_compile_warnings_opt"
  ac_compile_warnings_msg="$ac_compile_warnings_msg $ac_compile_warnings_opt for C"
fi
AC_MSG_RESULT($ac_compile_warnings_msg)
unset ac_compile_warnings_msg
unset ac_compile_warnings_opt
])


AC_COMPILE_WARNINGS
dnl AC_SYS_POSIX
AC_PROG_LIBTOOL
AC_PROG_MAKE_SET

dnl Check compiler capabilities
dnl AM_PROG_CC_C_O

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE


dnl Checks for library functions.


dnl Check for special needs

dnl ==========================================================================
dnl Check for the Xerces XML Parser
dnl ==========================================================================

AC_ARG_WITH(xml, [  --with-xml= [xerces | generic | none]  XML toolkit to use [default=xerces]])
AC_MSG_CHECKING(which xml parser to use)
AC_MSG_RESULT($with_xml)
xerces="no";
if [ test "x$with_xml" = "xxerces" ] || [ test "x$with_xml" = "x" ] ; then
AC_MSG_CHECKING(for xerces)
if test "x$XERCESCROOT" = "x" ; then
	AC_MSG_ERROR([*** xerces-c either not installed or XERCESCROOT environment variable not set ***])
fi
AC_MSG_RESULT($XERCESCROOT)

dnl Set the use of the c++ compiler for the following test
AC_LANG_CPLUSPLUS

AC_MSG_CHECKING(for version of xerces)
ORIG_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -I$XERCESCROOT/include -I$XERCESCROOT/include/xercesc $GLIB_CFLAGS"
AC_TRY_RUN([
#include <string.h>
#include "util/XercesDefs.hpp"
int main()
{
  if( strcmp( gXercesVersionStr, "1_2") == 0 )
    return 0 ;
#if defined (XERCES_VERSION_MAJOR) && ( XERCES_VERSION_MAJOR > 1 )
  return 0;
#else
  return -1;
#endif
}],
xerces="yes",
xerces="no",
xerces="no")
AC_MSG_RESULT($xerces)
if test "$xerces" != "yes" ; then
	AC_MSG_ERROR([*** incorrect/missing Xerces XML parser ***])

fi
CXXFLAGS="$ORIG_CXXFLAGS"
AC_DEFINE(PMT_USE_XERCES)
elif test "x$with_xml" = "xgeneric" ; then
  AC_DEFINE(PMT_USE_GENERIC_DOM)
elif test "x$with_xml" = "xnone" ; then
  AC_DEFINE(PMT_USE_NO_XML_PARSER)
else
  AC_MSG_ERROR([*** Cannot specify the '$with_xml' argument for the '--with-xml=' option  ***])
fi
AM_CONDITIONAL(INCLUDE_XERCES_DOM, test $xerces = "yes")
AM_CONDITIONAL(INCLUDE_GENERIC_DOM, test x$with_xml = xgeneric)
AM_CONDITIONAL(INCLUDE_NO_XML, test $xerces = "no")


dnl ==========================================================================
dnl Check if user wants to build with the TIFF Toolkit
dnl ==========================================================================

AC_MSG_CHECKING(which TIFF Toolkit to use)
AC_ARG_WITH(tiff, [  --with-tiff= [open | ektiff | none]  TIFF toolkit to use [default=open]])
if test "x$with_tiff" = "xopen" ; then
  # The user explicitly enabled the use of OpenTiff.
  AC_MSG_RESULT([$with_tiff])
  AC_MSG_CHECKING(for OpenTiff)
  if test "x$TIFFROOT" = "x" ; then
     AC_MSG_ERROR([*** OpenTiff Toolkit either not installed or TIFFROOT environment variable not set ***])
  fi
  AC_MSG_RESULT($TIFFROOT)
  AC_DEFINE(HAVE_OPENTIFF)
elif test "x$with_tiff" = "xektiff" ; then
  # The user explicitly enabled the use of EkTiff.
  AC_MSG_RESULT([$with_tiff])
  AC_MSG_CHECKING(for EkTiff)
  if test "x$TIFFROOT" = "x" ; then
     AC_MSG_ERROR([*** EkTiff Toolkit either not installed or TIFFROOT environment variable not set ***])
  fi
  AC_MSG_RESULT($TIFFROOT)
  AC_DEFINE(HAVE_EKTIFF)
elif test "x$with_tiff" = "x" ; then
  # Use OpenTiff by default.
  with_tiff=open
  AC_MSG_RESULT([$with_tiff])
  AC_MSG_CHECKING(for OpenTiff)
  if test "x$TIFFROOT" = "x" ; then
     AC_MSG_ERROR([*** OpenTiff Toolkit either not installed or TIFFROOT environment variable not set ***])
  fi
  AC_MSG_RESULT($TIFFROOT)
  AC_DEFINE(HAVE_OPENTIFF)
elif test "x$with_tiff" = "xnone" ; then
  AC_MSG_RESULT([$with_tiff])
else
   AC_MSG_ERROR([*** Cannot specify the '$with_tiff' argument for the '--with-tiff=' option  ***])
fi

AM_CONDITIONAL(INCLUDE_OPENTIFF, test x$with_tiff = xopen)
AM_CONDITIONAL(INCLUDE_EKTIFF, test x$with_tiff = xektiff)


dnl ==========================================================================
dnl Check if user wants to build with the KIES Toolkit
dnl ==========================================================================

AC_MSG_CHECKING(which Exif Toolkit to use)
AC_ARG_WITH(kiesexif, [  --with-exif= [kies | open | none]  Exif toolkit to use [default=kies]])
if test "x$with_exif" = "xkies" ; then
  # The user explicitly enabled the use of kies exif.
  AC_MSG_RESULT([$with_exif])
  AC_MSG_CHECKING(for KIES Exif)
  if test "x$KIESEXIFROOT" = "x" ; then
     AC_MSG_ERROR([*** Kies Exif Toolkit either not installed or KIESEXIFROOT environment variable not set ***])
  fi
  if test "x$JPEGROOT" = "x" ; then
     AC_MSG_ERROR([*** Jpeg Toolkit either not installed or JPEGROOT environment variable not set ***])
  fi
  AC_MSG_RESULT($KIESEXIFROOT)
  AC_DEFINE(HAVE_KIESEXIF)
elif test "x$with_exif" = "xopen" ; then
  # The user explicitly enabled the use of open exif.
  AC_MSG_RESULT([$with_exif])
  AC_MSG_CHECKING(for OpenExif)
  if test "x$EXIFROOT" = "x" ; then
     AC_MSG_ERROR([*** OpenExif Toolkit either not installed or EXIFROOT environment variable not set ***])
  fi
  AC_MSG_RESULT($EXIFROOT)
  AC_DEFINE(HAVE_OPENEXIF)
elif test "x$with_exif" = "xnone" ; then
  AC_MSG_RESULT([$with_exif])
elif test "x$with_exif" = "x" ; then
  # Use OpenExif by default.
  with_exif=open
  AC_MSG_RESULT([$with_exif])
  AC_MSG_CHECKING(for OpenExif)
  if test "x$EXIFROOT" = "x" ; then
     AC_MSG_ERROR([*** OpenExif Toolkit either not installed or EXIFROOT environment variable not set ***])
  fi
  AC_MSG_RESULT($EXIFROOT)
  AC_DEFINE(HAVE_OPENEXIF)
else
   AC_MSG_ERROR([*** Cannot specify the '$with_exif' argument for the '--with-exif=' option  ***])
fi # $with_exif = xkies

AM_CONDITIONAL(INCLUDE_KIESEXIF, test x$with_exif = xkies)
AM_CONDITIONAL(INCLUDE_OPENEXIF, test x$with_exif = xopen)


dnl ==========================================================================
dnl Check if they want to compile in the image accessor stuff
dnl ==========================================================================

AC_ARG_WITH(image_accessor, [  --with-image-accessor= [ yes | no ] Compile in the image accessors [default=yes]])
AC_MSG_CHECKING(to build image accessors )
build_image_accessors='yes'
if [ test "x$with_image_accessor" = "xno" ] ; then
  build_image_accessors='no'
else
  AC_DEFINE(PMT_IMAGE_ACCESSOR_REQUIRED)  
fi
AC_MSG_RESULT([$build_image_accessors])
AM_CONDITIONAL(USE_IMAGE_ACCESSORS, test x$build_image_accessors = xyes)


dnl ==========================================================================
dnl Check if they want to compile in the sound accessor stuff
dnl ==========================================================================

AC_ARG_WITH(sound_accessor, [  --with-sound-accessor= [ yes | no ] Compile in the sound accessors [default=yes]])
AC_MSG_CHECKING(to build sound accessors )
build_sound_accessors='yes'
if [ test "x$with_sound_accessor" = "xno" ] ; then
  build_sound_accessors='no'
else
  AC_DEFINE(PMT_SOUND_ACCESSOR_REQUIRED)  
fi
AC_MSG_RESULT([$build_sound_accessors])
AM_CONDITIONAL(USE_SOUND_ACCESSORS, test x$build_sound_accessors = xyes)


dnl ==========================================================================
dnl Check to see if they have X for the examples
dnl ==========================================================================

AC_MSG_CHECKING(for X11R6 )
ORIG_CXXFLAGS="$CXXFLAGS"
dnl TBD: Let the user select their own X location?
CXXFLAGS="$CXXFLAGS -I/usr/X11R6/include $GLIB_CFLAGS -L/usr/X11R6/lib -lXm -lXt -lX11"
AC_TRY_RUN([
#include <X11/Xlib.h> 
#include <X11/Xutil.h> 
#include <X11/Intrinsic.h>
#include <Xm/Xm.h>  
#include <Xm/XmAll.h>
int main()
{
    Widget w;
//If this compiles and links, everything should be OK.
    exit(0) ;
}],
X11R6="yes",
X11R6="no",
X11R6="no")
AC_MSG_RESULT($X11R6)
CXXFLAGS="$ORIG_CXXFLAGS"
if [ test "x$X11R6" = "xyes" ] ; then
    AC_DEFINE(PMT_EXAMPLES_USE_X)
fi
AM_CONDITIONAL(EXAMPLES_USE_X, test x$X11R6 = xyes)


dnl ==========================================================================
dnl Check if they want to compile in the JPEG2000 accessor
dnl ==========================================================================

AC_ARG_WITH(jpeg2000, [  --with-jpeg2000= [ kakadu | none ] Compile in the JPEG2000 accessor [default=none]])
build_dig35='no'
build_jpeg2000='no'
if [ test "x$with_jpeg2000" = "xkakadu" ] ; then
AC_MSG_CHECKING(for Kakadu)
if test "x$KAKADUROOT" = "x" ; then
	AC_MSG_ERROR([*** Kakadu is either not installed or the KAKADUROOT environment variable is not set ***])
fi
AC_MSG_RESULT($KAKADUROOT)

dnl Set the use of the c++ compiler for the following test
AC_LANG_CPLUSPLUS

AC_MSG_CHECKING(for version of Kakadu)
ORIG_CXXFLAGS="$CXXFLAGS"
CXXFLAGS="$CXXFLAGS -I$KAKADUROOT/include $GLIB_CFLAGS"
AC_TRY_RUN([
#include <iostream.h>
#include "kdu_compressed.h"
int main()
{
    char *v = KDU_CORE_VERSION;
    if (v[1] == '4')
        return 0;
    else
        return 1;
}],
kakadu="4",
kakadu="3",
kakadu="no")
if test "$kakadu" = "no" ; then
	AC_MSG_ERROR([*** incorrect version of Kakadu installed ***])
fi
if test "$kakadu" = "4" ; then
  AC_DEFINE(PMT_USE_KAKADU_4)
else
  AC_DEFINE(PMT_USE_KAKADU_3_EK)
fi

CXXFLAGS="$ORIG_CXXFLAGS"

  build_jpeg2000='yes'
  build_dig35='yes'
  AC_DEFINE(PMT_JPEG2000)
fi
AC_MSG_CHECKING(to build JPEG2000 accessor )
AC_MSG_RESULT([$build_jpeg2000])
AM_CONDITIONAL(USE_JPEG2000, test x$with_jpeg2000 = xkakadu)


dnl ==========================================================================
dnl Check if they want to compile in the DIG35 accessor
dnl ==========================================================================

AC_ARG_WITH(dig35, [  --with-dig35= [ yes | no ] Compile in the DIG35 accessor [default=no]])
AC_MSG_CHECKING(to build DIG35 accessor )
if [ ( test "x$with_dig35" = "xyes" ) || ( test "x$build_dig35" = "xyes" ) ] ; then
  build_dig35='yes'
  AC_DEFINE(PMT_DIG35)
fi
AC_MSG_RESULT([$build_dig35])
AM_CONDITIONAL(USE_DIG35, test x$with_dig35 = xyes)


dnl ==========================================================================
dnl Check if they want to compile in the PNG accessor
dnl ==========================================================================

AC_ARG_WITH(png_accessor, [  --with-png-accessor= [ yes | no ] Compile in the PNG accessor [default=no]])
AC_MSG_CHECKING(to build PNG accessor )
build_png_accessors='no'
if [ test "x$with_png_accessor" = "xyes" ] ; then
  build_png_accessors='yes'
fi
AC_MSG_RESULT([$build_png_accessors])
if [ test "x$with_png_accessor" = "xyes" ] ; then
  AC_MSG_CHECKING(for libpng)
  AC_TRY_RUN([
  #include "png.h"
  int main()
  {
	if(( PNG_LIBPNG_VER_MAJOR == 1) && 
	   ( PNG_LIBPNG_VER_MINOR == 2))
      exit(0) ;
	else 
      exit(-1) ;
  }],
  libpng="1.2.x",
  libpng="no",
  libpng="no")
  AC_MSG_RESULT($libpng)
  if test "$libpng" != "1.2.x" ; then
	  AC_MSG_ERROR([*** Could not find libpng 1.2.x ***])
  fi
  AC_DEFINE(PMT_PNG_ACCESSOR)
fi
AM_CONDITIONAL(USE_PNG_ACCESSORS, test x$with_png_accessor = xyes)

dnl ==========================================================================
dnl Check if they want to compile in the QuickTime accessor
dnl ==========================================================================

AC_ARG_WITH(qt_accessor, [  --with-qt-accessor= [ yes | no ] Compile in the QuickTime accessor [default=yes]])
AC_MSG_CHECKING(to build QuickTime accessor )
build_qt_accessors='yes'
if [ test "x$with_qt_accessor" = "xno" ] ; then
  build_qt_accessors='no'
else
  AC_DEFINE(PMT_QT_ACCESSOR)
fi
AC_MSG_RESULT([$build_qt_accessors])
AM_CONDITIONAL(USE_QT_ACCESSORS, test x$build_qt_accessors = xyes)


dnl ==========================================================================
dnl Check if they want to compile in the XMP accessor
dnl ==========================================================================

AC_ARG_WITH(xmp_accessor, [  --with-xmp-accessor= [ yes | no ] Compile in the XMP accessor [default=yes]])
AC_MSG_CHECKING(to build XMP accessor )
build_xmp_accessors='yes'
if [ test "x$with_xmp_accessor" = "xno" ] ; then
  build_xmp_accessors='no'
else
  AC_DEFINE(PMT_XMP_ACCESSOR)
fi
AC_MSG_RESULT([$build_xmp_accessors])
AM_CONDITIONAL(USE_XMP_ACCESSORS, test x$build_xmp_accessors = xyes)


dnl ==========================================================================
dnl Check if they want to compile in the embedded metadata documentation
dnl ==========================================================================

AC_ARG_WITH(embedded_docs, [  --with-embedded-docs= [ yes | no ] Compile in the embedded metadata documentation [default=yes]])
AC_MSG_CHECKING(to build in the embedded metadata documentation )
build_embedded_docs='yes'
if [ ( test "x$with_embedded_docs" = "xno" ) ] ; then
  build_embedded_docs='no'
else
  AC_DEFINE(PMT_USE_EMBEDDED_DOCUMENTATION)
fi
AC_MSG_RESULT([$build_embedded_docs])


dnl ==========================================================================
dnl Check if they want to compile in the writing out of the schema
dnl ==========================================================================

AC_ARG_WITH(write_out_schema, [  --with-write-out-schema= [ yes | no ] Force the writing out of the schema information [default=no]])
AC_MSG_CHECKING(to write out the schema information )
build_write_out_schema='no'
if [ ( test "x$with_write_out_schema" = "xyes" ) ] ; then
  build_write_out_schema='yes'
  AC_DEFINE(PMT_WRITE_OUT_SCHEMA)
fi
AC_MSG_RESULT([$build_write_out_schema])


dnl ==========================================================================
dnl the output
dnl ==========================================================================

AC_OUTPUT(Makefile doc/Makefile src/Makefile test/Makefile test/AccessorTest/Makefile test/NSTest/Makefile test/PmtInterpreterTest/Makefile test/VisitorTest/Makefile examples/Makefile examples/createTiff/Makefile examples/DataList/Makefile examples/DataView/Makefile examples/createExif/Makefile examples/IFDFinder/Makefile)

